{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","API","generalInfoUrl","services","readAll","axios","get","readGeneralInfo","readItem","id","create","newPerson","post","update","number","put","erase","delete","Notification","message","type","className","PersonForm","props","onSubmit","addNew","onChange","nameChangeHandler","numberChangeHandler","ShownPersons","shownPersons","deleteHandler","map","person","name","onClick","Filter","changeHandler","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filterPattern","setFilterPattern","notificationMessage","setNotificationMessage","notificationType","setNotificationType","useEffect","personCRUD","then","response","data","filter","indexOf","event","target","value","preventDefault","savedPerson","find","window","confirm","document","getElementById","setTimeout","catch","err","status","error","concat","p","ReactDOM","render","StrictMode"],"mappings":"4JAEIA,E,+EAMEC,EAAG,UADRD,EAAU,GACF,gBACHE,EAAc,UAAMF,EAAN,SAWLG,EATE,CAChBC,QAAS,kBAAMC,IAAMC,IAAIL,IACzBM,gBAAiB,kBAAMF,IAAMC,IAAIJ,IACjCM,SAAU,SAACC,GAAD,OAAQJ,IAAMC,IAAN,UAAaL,EAAb,YAAoBQ,KACtCC,OAAQ,SAACC,GAAD,OAAeN,IAAMO,KAAKX,EAAKU,IACvCE,OAAQ,SAACJ,EAAIK,GAAL,OAAgBT,IAAMU,IAAN,UAAad,EAAb,YAAoBQ,GAAM,CAACK,OAAQA,KAC3DE,MAAO,SAACP,GAAD,OAAQJ,IAAMY,OAAN,UAAgBhB,EAAhB,YAAuBQ,MCbjCS,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAZ,OACnBD,EACA,qBAAKE,UAAWD,EAAhB,SACGD,IAED,MAEEG,EAAa,SAACC,GAAD,OACjB,uBAAMC,SAAUD,EAAME,OAAtB,UACE,yCACQ,uBAAOhB,GAAG,UAAUiB,SAAUH,EAAMI,uBAE5C,2CACU,uBAAOlB,GAAG,YAAYiB,SAAUH,EAAMK,yBAEhD,8BACE,wBAAQR,KAAK,SAAb,uBAIAS,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,cAAjB,OACnB,8BACGD,EAAaE,KACZ,SAACC,EAAQxB,GAAT,OAAgB,8BACbwB,EAAOC,KADM,IACCD,EAAOnB,OACtB,wBAAQqB,QAASJ,EAAcE,GAA/B,sBAFsBxB,SASxB2B,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAH,OACb,mDAAqB,uBAAOX,SAAUW,IAAtC,QA4IaC,EA1IH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACRC,EADQ,KACCC,EADD,OAEgBF,mBAAS,IAFzB,mBAERG,EAFQ,KAECC,EAFD,OAGoBJ,mBAAS,IAH7B,mBAGRK,EAHQ,KAGGC,EAHH,OAI4BN,mBAAS,IAJrC,mBAIRO,EAJQ,KAIOC,EAJP,OAKwCR,mBAAS,MALjD,mBAKRS,EALQ,KAKaC,EALb,OAMkCV,mBAAS,WAN3C,mBAMRW,EANQ,KAMUC,EANV,KAQhBC,qBAAW,WACPC,EACGjD,UACAkD,MAAK,SAAAC,GACJd,EAAWc,EAASC,WAEzB,IAEH,IAsGI1B,EACgB,KAAlBgB,EACEN,EACAA,EAAQiB,QACN,SAAAxB,GAAM,OAAIA,EAAOC,KAAKwB,QAAQZ,IAAkB,KAGtD,OACE,gCACE,2CACA,cAAC,EAAD,CAAc3B,QAAS6B,EAAqB5B,KAAM8B,IAClD,cAAC,EAAD,CAAQb,cApCsB,SAACsB,GACjCZ,EAAiBY,EAAMC,OAAOC,UAoC5B,2CACA,cAAC,EAAD,CAAYlC,kBA9CS,SAACgC,GACxBhB,EAAWgB,EAAMC,OAAOC,QA6C2BjC,oBA1C1B,SAAC+B,GAC1Bd,EAAac,EAAMC,OAAOC,QAyCkEpC,OAnH/E,SAACkC,GACdA,EAAMG,iBACN,IAAMC,EAAcvB,EAAQwB,MAC1B,SAAA/B,GAAM,OAAIA,EAAOC,OAASQ,KAE5B,GAAIqB,EACEE,OAAOC,QAAP,UACDxB,EADC,4EAGFW,EACGxC,OAAOkD,EAAYtD,GAAImC,GACvBU,MAAM,WACLS,EAAYjD,OAAS8B,EACrBD,EAAW,IACXE,EAAa,OAEdS,MAAM,WACLa,SAASC,eAAe,WAAWP,MAAQ,GAC3CM,SAASC,eAAe,aAAaP,MAAQ,GAC7CZ,EAAuB,WAAD,OAAYc,EAAY7B,OAC9CiB,EAAoB,WACpBkB,YAAY,WACVpB,EAAuB,QACtB,QAEJqB,OAAM,SAAAC,GACuB,MAAxBA,EAAIhB,SAASiB,OACfvB,EAAuBsB,EAAIhB,SAASC,KAAKiB,OAEzCxB,EAAuB,kBAAD,OAAmBc,EAAY7B,KAA/B,0CACxBiB,EAAoB,SACpBkB,YAAY,WACVpB,EAAuB,QACtB,YAGJ,CACL,IAAMtC,EAAY,CAChBuB,KAAMQ,EACN5B,OAAQ8B,GAEVS,EACG3C,OAAOC,GACP2C,MAAK,SAAArB,GACJtB,EAAUF,GAAKwB,EAAOuB,KAAK/C,GAC3BgC,EAAWD,EAAQkC,OAAO/D,IAC1BgC,EAAW,IACXE,EAAa,OAEdS,MAAM,WAELa,SAASC,eAAe,WAAWP,MAAQ,GAC3CM,SAASC,eAAe,aAAaP,MAAQ,GAC7CZ,EAAuB,SAAD,OAAUtC,EAAUuB,OAC1CiB,EAAoB,WACpBkB,YAAY,WACVpB,EAAuB,QACtB,QAEJqB,OAAM,SAAAC,GACLtB,EAAuBsB,EAAIhB,SAASC,KAAKiB,OACzCtB,EAAoB,SACpBkB,YAAY,WACVpB,EAAuB,QACtB,YAoDP,yCACA,cAAC,EAAD,CAAcnB,aAAcA,EAAcC,cApCxB,SAACE,GAAD,OAAY,WAChC,IAAMC,EAAOD,EAAOC,KACF+B,OAAOC,QAAP,iBAAyBhC,EAAzB,QAEhBmB,EACGrC,MAAMiB,EAAOxB,IACb6C,MAAM,WACLb,EAAWD,EAAQiB,QACjB,SAACkB,GAAD,OAAOA,IAAM1C,SAGhBqB,MAAM,WACLL,EAAuB,WAAD,OAAYf,IAClCiB,EAAoB,WACpBkB,YAAY,WACVpB,EAAuB,QACtB,gBCnJb2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFX,SAASC,eAAe,W","file":"static/js/main.c8d3f8eb.chunk.js","sourcesContent":["import axios from 'axios'\n\nvar baseUrl\nif (process.env.NODE_ENV === 'development') {\n\tconst serverPort = 3101\n\tbaseUrl = `http://localhost:${serverPort}`\n} else\n\tbaseUrl = ''\nconst API = `${baseUrl}/api/persons`\nconst generalInfoUrl = `${baseUrl}/info`\n\nconst services = {\n\treadAll: () => axios.get(API),\n\treadGeneralInfo: () => axios.get(generalInfoUrl),\n\treadItem: (id) => axios.get(`${API}/${id}`),\n\tcreate: (newPerson) => axios.post(API, newPerson),\n\tupdate: (id, number) => axios.put(`${API}/${id}`, {number: number}),\n\terase: (id) => axios.delete(`${API}/${id}`)\n}\n\nexport default services\n\n","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport personCRUD from './services/persons'\n\nconst Notification = ({ message, type }) =>\n  message ? \n  <div className={type}>\n    {message}\n  </div>\n  : null\n\nconst PersonForm = (props) =>\n  <form onSubmit={props.addNew}>\n    <div>\n      name: <input id=\"nameBox\" onChange={props.nameChangeHandler} />\n    </div>\n    <div>\n      number: <input id=\"numberBox\" onChange={props.numberChangeHandler} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n \nconst ShownPersons = ({ shownPersons, deleteHandler }) =>\n  <div>  \n    {shownPersons.map(\n      (person, id) => <p key={id}>\n        {person.name} {person.number}\n        <button onClick={deleteHandler(person)}>\n          delete\n        </button>\n      </p>\n    )}\n  </div>\n \nconst Filter = ({ changeHandler }) =>\n  <p>filter shown with <input onChange={changeHandler} /> </p>\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterPattern, setFilterPattern ] = useState('')\n  const [ notificationMessage, setNotificationMessage ] = useState(null)\n  const [ notificationType, setNotificationType ] = useState('success')\n\n  useEffect( () => {\n      personCRUD\n        .readAll()\n        .then(response => {\n          setPersons(response.data)\n        })\n  }, [])\n  \n  const addNew = (event) => {\n    event.preventDefault()\n    const savedPerson = persons.find(\n      person => person.name === newName\n    )\n    if (savedPerson) {\n      if (window.confirm(\n      `${newName} is already added to phonebook, replace the old number with a new one?`)\n      ) {\n        personCRUD\n          .update(savedPerson.id, newNumber)\n          .then( () => {\n            savedPerson.number = newNumber\n            setNewName('')\n            setNewNumber('')\n          })\n          .then( () => {\n            document.getElementById('nameBox').value = ''\n            document.getElementById('numberBox').value = ''\n            setNotificationMessage(`Updated ${savedPerson.name}`)\n            setNotificationType('success')\n            setTimeout( () => {\n              setNotificationMessage(null)\n            }, 5000)\n          })\n          .catch(err => {\n            if (err.response.status === 400)\n              setNotificationMessage(err.response.data.error)\n            else\n              setNotificationMessage(`Information of ${savedPerson.name} has already been removed from server`)\n            setNotificationType('error')\n            setTimeout( () => {\n              setNotificationMessage(null)\n            }, 5000)\n          })\n      }\n    } else {\n      const newPerson = {\n        name: newName,\n        number: newNumber,\n      }\n      personCRUD\n        .create(newPerson)\n        .then(person => {\n          newPerson.id = person.data.id\n          setPersons(persons.concat(newPerson))\n          setNewName('')\n          setNewNumber('')\n        })\n        .then( () => {\n          //alert(`${newPerson.name} is already added to phonebook`)\n          document.getElementById('nameBox').value = ''\n          document.getElementById('numberBox').value = ''\n          setNotificationMessage(`Added ${newPerson.name}`)\n          setNotificationType('success')\n          setTimeout( () => {\n            setNotificationMessage(null)\n          }, 5000)\n        })\n        .catch(err => {\n          setNotificationMessage(err.response.data.error)\n          setNotificationType('error')\n          setTimeout( () => {\n            setNotificationMessage(null)\n          }, 5000)\n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterPatternChange = (event) => {\n    setFilterPattern(event.target.value)\n  }\n\n  const deleteHandler = (person) => () => {\n    const name = person.name\n    const confirmed = window.confirm(`Delete ${name} ?`)\n    if (confirmed) {\n      personCRUD\n        .erase(person.id)\n        .then( () => {\n          setPersons(persons.filter(\n            (p) => p !== person\n          ))\n        })\n        .then( () => {\n          setNotificationMessage(`Deleted ${name}`)\n          setNotificationType('success')\n          setTimeout( () => {\n            setNotificationMessage(null)\n          }, 5000)\n        })\n    }\n  }\n\n  var shownPersons =\n    filterPattern === ''\n    ? persons\n    : persons.filter(\n        person => person.name.indexOf(filterPattern) >= 0\n    )\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} type={notificationType} />\n      <Filter changeHandler={handleFilterPatternChange} />\n      <h3>add a new</h3>\n      <PersonForm nameChangeHandler={handleNameChange} numberChangeHandler={handleNumberChange} addNew={addNew} />\n      <h2>Numbers</h2>\n      <ShownPersons shownPersons={shownPersons} deleteHandler={deleteHandler} />\n    </div>\n  )\n}\n\nexport default App\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}